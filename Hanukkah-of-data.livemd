# Hanukkah of Data ðŸ•Ž -- 5783

```elixir
Mix.install([:csv])

# there is a comma in citizenstatezip as well
customers =
  "./data/noahs-customers.csv"
  |> Path.expand(__DIR__)
  |> File.stream!()
  |> CSV.decode()

orders =
  "./data/noahs-orders.csv"
  |> Path.expand(__DIR__)
  |> File.stream!()
  |> CSV.decode()

items =
  "./data/noahs-orders_items.csv"
  |> Path.expand(__DIR__)
  |> File.stream!()
  |> CSV.decode()

products =
  "./data/noahs-products.csv"
  |> Path.expand(__DIR__)
  |> File.stream!()
  |> CSV.decode()

# own CSV parsing attempt
# |> Stream.map(&String.trim(&1))
# |> Stream.map(&String.split(&1, ","))
# |> Stream.map(fn [customerId, name, address, citizen, statezip, birthdate, phone] ->
# %{name: name, phone: phone}
# end)
# |> Stream.filter(fn
#   ["Timestamp" | _] -> false
#   [_, "NaN" | _] -> false
#   [timestamp | _] ->
#     IO.puts("filter -> #{timestamp}")
#     true
# end)
```

## Night 1

## Knowledge

* Noah's Market
* Noah is the granduncle
* database started 2017 (by cousin Alex, who is too busy)
* Store is in Manhatten, NY (NYC)
* I was buying bagels
* Aunt Sarah
* *rug* is missing (JD spec 2017)

<!-- livebook:{"break_markdown":true} -->

> Find the private investigator's phone number ðŸ‘€

```elixir
convert_to_code = fn letter ->
  # a = 0, z = 25
  char = letter - 97

  cond do
    # abc
    char <= 2 -> 2
    # def
    char <= 5 -> 3
    char <= 8 -> 4
    char <= 11 -> 5
    char <= 14 -> 6
    char <= 18 -> 7
    char <= 21 -> 8
    # xzy
    char <= 25 -> 9
    true -> raise "oh no"
  end
end

customers
|> Stream.drop(1)
|> Stream.map(fn {_ok, [_id, name, _add, _state, _birth, phone]} ->
  %{name: name, phone: phone}
end)
|> Stream.map(fn %{name: name, phone: phone} ->
  name_num =
    name
    |> String.split(" ")
    |> List.last()
    |> String.downcase()
    |> String.graphemes()
    |> Enum.map(fn s -> s |> String.to_charlist() |> hd end)
    |> Enum.map(convert_to_code)
    |> Enum.join("")

  new_phone =
    phone
    |> String.replace("-", "")

  %{name_num: name_num, phone: new_phone, orig_phone: phone}
end)
|> Stream.filter(fn %{name_num: name_num, phone: phone, orig_phone: _phone} ->
  String.contains?(name_num, phone)
end)
|> Enum.to_list()
|> List.first()
|> Map.get(:orig_phone)
```

## Night 2

JD's phone number

```elixir
qualified_customers =
  customers
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [customerId, name, address, state, _birth, phone]} ->
    %{customerId: customerId, name: name, phone: phone, state: state, address: address}
  end)
  |> Stream.filter(fn data ->
    parts = String.split(data.name, " ")

    if Enum.count(parts) > 2 do
      false
    else
      [first, last] = parts
      # && String.contains?(data.state, "Manhattan") # did not work
      # did not work
      String.starts_with?(first, "J") && String.starts_with?(last, "D") &&
        String.contains?(data.state, "NY")
    end
  end)

qualified_customers_id =
  qualified_customers
  |> Stream.map(&Map.get(&1, :customerId))
  |> Enum.to_list()

qualified_customers
|> Enum.to_list()
```

Attempt one: customers -> orders -> items

```elixir
qualified_orders =
  orders
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [orderId, customerId, ordered, _shipped, _items, _total]} ->
    %{orderId: orderId, customerId: customerId, ordered: ordered}
  end)
  |> Stream.map(fn data ->
    {:ok, date} = NaiveDateTime.from_iso8601(data.ordered)

    data
    |> Map.put(:ordered, date)
  end)
  |> Stream.filter(fn data ->
    date = Map.get(data, :ordered)
    date.year == 2017 && Enum.member?(qualified_customers_id, data.customerId)
  end)

qualified_orders
|> Enum.to_list()
```

```elixir
qualified_order_ids =
  qualified_orders
  |> Stream.map(fn data -> data.orderId end)
  |> Enum.to_list()

qualified_items =
  items
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [orderId, sku, _qty, _up]} -> %{orderId: orderId, sku: sku} end)
  |> Stream.filter(fn data ->
    Enum.member?(qualified_order_ids, data.orderId)
  end)

qualified_skus =
  qualified_items
  |> Stream.map(fn data -> data.sku end)
  |> Enum.to_list()
```

```elixir
qskus =
  products
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [sku, desc, _wc]} -> %{desc: String.downcase(desc), sku: sku} end)
  |> Stream.filter(fn data ->
    # && String.starts_with?(data.sku, "KIT") # prodcut category not the best idea
    Enum.member?(qualified_skus, data.sku) &&
      (String.contains?(data.desc, "coffee") ||
         String.contains?(data.desc, "bagel"))
  end)
  |> Stream.map(&Map.get(&1, :sku))
  |> Enum.to_list()
```

Attempt two (starting from the prodcuts):

```elixir
# products (bagel and coffee) that have been bought
qualified_products =
  products
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [sku, desc, _wc]} -> %{desc: String.downcase(desc), sku: sku} end)
  |> Stream.filter(fn data ->
    String.contains?(data.desc, "coffee") ||
      String.contains?(data.desc, "bagel")

    # || String.contains?(data.desc, "clean")
  end)

qualified_products
|> Enum.to_list()
```

```elixir
qualified_skus =
  qualified_products
  |> Stream.map(&Map.get(&1, :sku))
  |> Enum.to_list()
```

```elixir
# find the items and their order ids of the qualified product skus
interesting_order_ids =
  items
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [orderId, sku, _qty, _up]} -> %{orderId: orderId, sku: sku} end)
  |> Stream.filter(fn data -> Enum.member?(qualified_skus, data.sku) end)
  |> Stream.map(&Map.get(&1, :orderId))
  |> Enum.to_list()

# find all orders for the order ids
interesting_orders =
  orders
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [orderId, customerId, ordered, _shipped, _items, _total]} ->
    %{orderId: orderId, customerId: customerId, ordered: ordered}
  end)
  |> Stream.filter(fn data -> Enum.member?(interesting_order_ids, data.orderId) end)
  |> Stream.filter(fn data -> String.starts_with?(data.ordered, "2017-") end)
  |> Enum.to_list()
```

```elixir
more_interesting_orders =
  interesting_orders
  |> Stream.filter(fn data -> Enum.member?(qualified_customers_id, data.customerId) end)
  # three items, ordered by date ASC
  |> Enum.to_list()

# |> List.first # first item = oldest one
# |> then(&Map.get(&1, :customerId))
```

```elixir
customer_id =
  more_interesting_orders
  |> List.first()
  |> then(&Map.get(&1, :customerId))
```

```elixir
qualified_customers
|> Enum.find(fn data -> data.customerId == customer_id end)

# |> Map.get(:phone)
```

## Night 3

* Year of the Dog = 2030, 2018, 2006, 1994, 1982, 1970
* Aries: 21. marts - 20. april
* same neighbourhood: South Ozone Park, NY 11420

```elixir
customers
|> Stream.drop(1)
|> Stream.filter(fn {_ok, order} ->
  {:ok, date} = Date.from_iso8601(Enum.at(order, 4))
  # years of dog
  # Aries
  # same neighbourhood in NY
  Enum.member?([1946, 1958, 1970, 1982, 1994], date.year) &&
    (date.month == 3 || date.month == 4) &&
    String.contains?(Enum.at(order, 3), "NY 11420")
end)
|> Stream.map(fn {_ok, list} -> Enum.at(list, 5) end)
|> Enum.to_list()
|> List.first()
```

## Night 4

Looking for *bicycle fixer's phone number*

* female person
* bike chain repair kit
* patries -> pastry -> bagel (or BKY prefix)
* years ago: so not 2022 and neither 2021 -> 2017 - 2020
* 5am -> before 5 am but not too far

```elixir
# products (bagel and coffee) that have been bought
qualified_products =
  products
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [sku, desc, _wc]} -> %{desc: String.downcase(desc), sku: sku} end)
  |> Stream.filter(fn data ->
    # just works
    String.contains?(data.desc, "bagel")
    # String.starts_with?(data.sku, "BKY") # prints too mahy
  end)

skus =
  qualified_products
  |> Stream.map(fn data -> data.sku end)
  |> Enum.to_list()
```

```elixir
# find the items and their order ids of the qualified product skus
interesting_order_ids =
  items
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [orderId, sku, _qty, _up]} -> %{orderId: orderId, sku: sku} end)
  |> Stream.filter(fn data -> Enum.member?(skus, data.sku) end)
  |> Stream.map(&Map.get(&1, :orderId))
  |> Enum.to_list()
```

```elixir
# find all orders for the order ids
interesting_orders =
  orders
  |> Stream.drop(1)
  |> Stream.map(fn {_ok, [orderId, customerId, ordered, _shipped, _items, _total]} ->
    %{orderId: orderId, customerId: customerId, ordered: ordered}
  end)
  |> Stream.filter(fn data -> Enum.member?(interesting_order_ids, data.orderId) end)
  |> Stream.filter(fn order ->
    {:ok, date} = NaiveDateTime.from_iso8601(order.ordered)

    date.year != 2022 &&
      date.hour < 5 && date.hour > 3
  end)
  |> Enum.to_list()
```
